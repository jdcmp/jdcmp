package io.github.jdcmp.codegen.customization;

/**
 * Configures the strategy for initializing fields of generated classes.
 */
public enum AvailableInitializationMode {

	/**
	 * Generated classes contain a static initializer for field initialization.
	 *
	 * <ul>
	 *     <li>The static initializer increases the size of the generated bytecode.</li>
	 *     <li>Provides the best compatibility, since no private/unofficial APIs must be used.</li>
	 * </ul>
	 */
	STATIC_INITIALIZER {
		@Override
		public <T> T map(InitializationModeMapper<T> mapper) {
			return mapper.onStaticInitializer();
		}
	},
	/**
	 * Generated classes contain no mechanism for field initialization.
	 *
	 * <ul>
	 *     <li>The absence of an initialization mechanism reduces the size of the generated bytecode.</li>
	 *     <li>Compatibility is worse compared to {@link #STATIC_INITIALIZER}. Initialization is handled
	 *     using unsupported reflection features or similar hacks with <i>sun.misc.Unsafe</i>.</li>
	 * </ul>
	 */
	EXTERNAL {
		@Override
		public <T> T map(InitializationModeMapper<T> mapper) {
			return mapper.onExternal();
		}
	};

	/**
	 * Maps the enum constant using the given mapper. See {@link InitializationModeMapper}.
	 *
	 * @param mapper The mapper
	 * @return A user-supplied return value
	 * @param <T> Type of the return value
	 */
	abstract public <T> T map(InitializationModeMapper<T> mapper);

	/**
	 * <p>Maps an initialization mode to a user-supplied value. For every enum constant, there is one handler method present in
	 * this mapper.</p>
	 *
	 * <p>If any enum constants are added in the future, using this mapper will force implementors to handle the new
	 * "on"-method. This reduces the risk of missing cases in <code>if</code> or <code>switch</code> statements.</p>
	 *
	 * @param <T> Type of the return value
	 */
	public interface InitializationModeMapper<T> {

		/**
		 * Invoked when {@link AvailableInitializationMode#STATIC_INITIALIZER} is used.
		 *
		 * @return User-supplied return value
		 */
		T onStaticInitializer();

		/**
		 * Invoked when {@link AvailableInitializationMode#EXTERNAL} is used.
		 *
		 * @return User-supplied return value
		 */
		T onExternal();

	}

}
