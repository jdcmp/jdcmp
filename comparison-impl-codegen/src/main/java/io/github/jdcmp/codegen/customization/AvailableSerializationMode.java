package io.github.jdcmp.codegen.customization;


import io.github.jdcmp.api.serialization.SerializationDisabledException;

/**
 * Configuration constants and documentation describing serialization compatibility for the generated classes.
 */
public enum AvailableSerializationMode {

	/**
	 * Generates serialization methods that aim to be fully compatible with Java's serialization mechanism and transparent to users.
	 * This increases the size of the generated bytecode compared to {@link #COMPATIBLE_UNPROTECTED} or {@link #INCOMPATIBLE}.
	 */
	COMPATIBLE(true, false) {
		@Override
		public <T> T map(SerializationModeMapper<T> mapper) {
			return mapper.onCompatible();
		}
	},
	/**
	 * Unlike {@link #COMPATIBLE}, this mode omits safeguards against malicious serialized streams. This reduces the size of the
	 * generated bytecode compared to {@link #COMPATIBLE}.
	 */
	COMPATIBLE_UNPROTECTED(true, false) {
		@Override
		public <T> T map(SerializationModeMapper<T> mapper) {
			return mapper.onCompatibleUnprotected();
		}
	},
	/**
	 * Omits serialization methods. The resulting comparator does not support serialization, but does not prevent it either. This may lead
	 * to confusing behavior, with working serialization and deserialization inside the same JVM instance, but failing deserialization on
	 * another JVM instance (of the same type, just another process). Since no methods are inserted, the size of the generated bytecode
	 * is unaffected by this mode.
	 */
	INCOMPATIBLE(false, false) {
		@Override
		public <T> T map(SerializationModeMapper<T> mapper) {
			return mapper.onIncompatible();
		}
	},
	/**
	 * Generates serialization methods that actively prevent serialization and deserialization. This increases the
	 * size of the generated bytecode.
	 */
	HOSTILE(false, true) {
		@Override
		public <T> T map(SerializationModeMapper<T> mapper) {
			return mapper.onHostile();
		}
	};

	private final boolean supportsSerialization;

	private final boolean preventsSerialization;

	AvailableSerializationMode(boolean supportsSerialization, boolean preventsSerialization) {
		if (supportsSerialization && preventsSerialization) {
			throw new IllegalArgumentException("Conflicting settings");
		}

		this.supportsSerialization = supportsSerialization;
		this.preventsSerialization = preventsSerialization;
	}

	/**
	 * Maps the enum constant using the given mapper. See {@link SerializationModeMapper}.
	 *
	 * @param mapper The mapper
	 * @param <T>    Type of the return value
	 * @return A user-supplied return value
	 */
	abstract public <T> T map(SerializationModeMapper<T> mapper);

	/**
	 * Indicates whether serialization is supported.
	 *
	 * @return true if serialization is supported; false otherwise
	 */
	public boolean supportsSerialization() {
		return supportsSerialization;
	}

	/**
	 * Indicates whether serialization is prevented.
	 *
	 * @return true if serialization is prevented; false otherwise
	 */
	public boolean preventsSerialization() {
		return preventsSerialization;
	}

	/**
	 * Helper method for writing safeguards. Throws in case serialization is disabled.
	 *
	 * @throws SerializationDisabledException If serialization is prevented
	 */
	public void throwIfPrevented() throws SerializationDisabledException {
		if (preventsSerialization()) {
			throw new SerializationDisabledException();
		}
	}

	/**
	 * <p>Maps an initialization mode to a user-supplied value. For every enum constant, there is one handler method present in
	 * this mapper.</p>
	 *
	 * <p>If any enum constants are added in the future, using this mapper will force implementors to handle the new
	 * "on"-method. This reduces the risk of missing cases in <code>if</code> or <code>switch</code> statements.</p>
	 *
	 * @param <T> Type of the return value
	 */
	public interface SerializationModeMapper<T> {

		/**
		 * Invoked when {@link AvailableSerializationMode#COMPATIBLE} is used.
		 *
		 * @return User-supplied return value
		 */
		T onCompatible();

		/**
		 * Invoked when {@link AvailableSerializationMode#COMPATIBLE_UNPROTECTED} is used.
		 *
		 * @return User-supplied return value
		 */
		T onCompatibleUnprotected();

		/**
		 * Invoked when {@link AvailableSerializationMode#INCOMPATIBLE} is used.
		 *
		 * @return User-supplied return value
		 */
		T onIncompatible();

		/**
		 * Invoked when {@link AvailableSerializationMode#HOSTILE} is used.
		 *
		 * @return User-supplied return value
		 */
		T onHostile();

	}

}
